import streamlit as st
import numpy as np
import pandas as pd
import plotly.graph_objects as go
import networkx as nx
from models.optimizer import UserOptimizer, ScenarioAnalyzer
from models.structure import NetworkStructure
from utils.constants import QUALIFICATIONS, BONUS_RATES, STARTER_KITS, STARTER_KIT_PRIVILEGES, CLUB_BENEFITS, CLUB_EVENTS, CLUB_LEVELS, REGIONS, COMPRESSION_WARNINGS, RECOVERY_CONDITIONS, QUALIFICATION_NAMES
from utils.visualization import plot_network, plot_metrics

st.set_page_config(
    page_title="–û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã NL",
    page_icon="üìä",
    layout="wide"
)

def analyze_scenarios():
    st.header("–ê–Ω–∞–ª–∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è PV")
    
    total_pv = st.number_input(
        "–í–≤–µ–¥–∏—Ç–µ –æ–±—â–∏–π –æ–±—ä–µ–º PV –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
        min_value=100,
        max_value=1000000,
        value=10000,
        step=100
    )
    
    if st.button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–∏"):
        analyzer = ScenarioAnalyzer()
        scenarios = analyzer.generate_scenarios(total_pv)
        
        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
        st.write("–°—Ü–µ–Ω–∞—Ä–∏–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –æ–±—â–µ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Å —É—á–µ—Ç–æ–º –¥–æ—Ö–æ–¥–∞ –∏ —Ä–∏—Å–∫–æ–≤)")
        
        for i, scenario in enumerate(scenarios, 1):
            metrics = scenario['metrics']
            
            with st.expander(f"{i}. {scenario['name']} (–°–∫–æ—Ä: {metrics['total_score']:.2f})"):
                col1, col2 = st.columns(2)
                
                with col1:
                    st.write("### –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
                    st.write(f"- –ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è: {metrics['qualification']}")
                    st.write(f"- –û–±—â–∏–π –¥–æ—Ö–æ–¥: {metrics['total_income']:.2f} —É.–µ.")
                    st.write(f"- –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤: {metrics['active_partners']}")
                    st.write(f"- –ì—Ä—É–ø–ø–æ–≤–æ–π –æ–±—ä–µ–º: {metrics['group_volume']:.0f} PV")
                    st.write(f"- –ë–æ–∫–æ–≤–æ–π –æ–±—ä–µ–º: {metrics['side_volume']:.0f} PV")
                    st.write(f"- –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {metrics['efficiency']:.2%}")
                    st.write(f"- –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞: {metrics['risk_score']:.2%}")
                
                with col2:
                    st.write("### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–æ–Ω—É—Å–æ–≤")
                    bonus_data = {
                        '–¢–∏–ø –±–æ–Ω—É—Å–∞': [
                            '–õ–∏—á–Ω—ã–π –±–æ–Ω—É—Å (LO)',
                            '–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–π –±–æ–Ω—É—Å (PB)',
                            '–ì—Ä—É–ø–ø–æ–≤–æ–π –±–æ–Ω—É—Å (GO)',
                            '–ö–ª—É–±–Ω—ã–π –±–æ–Ω—É—Å'
                        ],
                        '–°—É–º–º–∞': [
                            metrics['personal_bonus'],
                            metrics['partner_bonus'],
                            metrics['group_bonus'],
                            metrics['club_bonus']
                        ]
                    }
                    bonus_df = pd.DataFrame(bonus_data)
                    bonus_df = bonus_df[bonus_df['–°—É–º–º–∞'] > 0]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–Ω—É–ª–µ–≤—ã–µ –±–æ–Ω—É—Å—ã
                    
                    fig = go.Figure(data=[
                        go.Bar(
                            x=bonus_df['–¢–∏–ø –±–æ–Ω—É—Å–∞'],
                            y=bonus_df['–°—É–º–º–∞'],
                            text=bonus_df['–°—É–º–º–∞'].round(2),
                            textposition='auto',
                        )
                    ])
                    fig.update_layout(
                        title='–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–æ–Ω—É—Å–æ–≤',
                        xaxis_title='–¢–∏–ø –±–æ–Ω—É—Å–∞',
                        yaxis_title='–°—É–º–º–∞ (—É.–µ.)'
                    )
                    st.plotly_chart(fig, key=f"bonus_chart_{i}")
                
                # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                st.write("### –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
                fig = plot_network(scenario['structure'])
                st.plotly_chart(fig, key=f"network_plot_{i}", use_container_width=True)

def main():
    st.title("–û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã NL")
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    st.sidebar.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã")
    
    # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
    mode = st.sidebar.radio(
        "–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã",
        ["–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã", "–ê–Ω–∞–ª–∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"]
    )
    
    if mode == "–ê–Ω–∞–ª–∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤":
        analyze_scenarios()
    else:
        # –í—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞
        selected_region = st.sidebar.selectbox(
            "–†–µ–≥–∏–æ–Ω",
            list(REGIONS.keys()),
            format_func=lambda x: REGIONS[x]['name']
        )
        
        region_info = REGIONS[selected_region]
        st.sidebar.write(f"–í–∞–ª—é—Ç–∞: {region_info['currency']}")
        st.sidebar.write(f"–ú–∏–Ω. PV: {region_info['min_pv_threshold']}")
        
        # –í—ã–±–æ—Ä —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞
        st.sidebar.subheader("–°—Ç–∞—Ä—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä")
        starter_kit = st.sidebar.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä",
            ["–ù–µ—Ç"] + list(STARTER_KITS.keys()),
            format_func=lambda x: {
                'START': '–°—Ç–∞—Ä—Ç (100 —É.–µ.)',
                'START_PLUS': '–°—Ç–∞—Ä—Ç+ (200 —É.–µ.)',
                'BUSINESS': '–ë–∏–∑–Ω–µ—Å (500 —É.–µ.)',
                'VIP': 'VIP (1000 —É.–µ.)',
                '–ù–µ—Ç': '–ë–µ–∑ –Ω–∞–±–æ—Ä–∞'
            }.get(x, x)
        )
        
        if starter_kit != "–ù–µ—Ç":
            st.sidebar.write("### –ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏ –Ω–∞–±–æ—Ä–∞")
            kit = STARTER_KITS[starter_kit]
            for privilege in kit['privileges']:
                priv_info = STARTER_KIT_PRIVILEGES[privilege]
                st.sidebar.write(f"- {priv_info['name']}")
                if 'duration' in priv_info:
                    st.sidebar.write(f"  _{priv_info['duration']} –¥–Ω–µ–π_")
        
        total_pv = st.sidebar.number_input(
            "–û–±—â–∏–π –æ–±—ä–µ–º PV –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è",
            min_value=1000,
            max_value=1000000,
            value=10000,
            step=1000
        )
        
        optimization_mode = st.sidebar.selectbox(
            "–†–µ–∂–∏–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏",
            ["–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å", "–ê–Ω–∞–ª–∏–∑ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π"]
        )
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–µ—Ç–∏")
            optimizer = UserOptimizer()
            structure = NetworkStructure(total_pv)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–≥–∏–æ–Ω –¥–ª—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
            root_partner = structure.partners[structure.root_id]
            root_partner.region = selected_region
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω
            if starter_kit != "–ù–µ—Ç":
                structure.partners[structure.root_id].purchase_starter_kit(starter_kit)
            
            if optimization_mode == "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å":
                result = optimizer.optimize_for_profit(structure)
            else:
                result = optimizer.analyze_vulnerabilities(structure)
                
            # –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
            st.write("### –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Å–µ—Ç–∏")
            history = result.get_history()
            
            # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞
            if history:
                tabs = st.tabs([snapshot['stage_name'] for snapshot in history])
                
                for i, (tab, snapshot) in enumerate(zip(tabs, history)):
                    with tab:
                        metrics = snapshot['metrics']
                        
                        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —ç—Ç–∞–ø–∞
                        st.write("#### –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
                        stage_metrics = pd.DataFrame({
                            "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": [
                                "–í—Å–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤",
                                "–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤",
                                "–û–±—â–∏–π PV",
                                "–û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥"
                            ],
                            "–ó–Ω–∞—á–µ–Ω–∏–µ": [
                                metrics["total_partners"],
                                metrics["active_partners"],
                                f"{metrics['total_pv']:,.0f}",
                                f"{metrics['expected_income']:,.2f} —É.–µ."
                            ]
                        })
                        st.table(stage_metrics)
                        
                        # –ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ —ç—Ç–∞–ø–µ
                        if 'qualification_counts' in metrics:
                            st.write("#### –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–π")
                            qual_data = []
                            for qual, count in metrics['qualification_counts'].items():
                                qual_data.append({
                                    "–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è": QUALIFICATION_NAMES[qual],
                                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": count
                                })
                            qual_df = pd.DataFrame(qual_data)
                            st.table(qual_df)
                        
                        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ—Ö–æ–¥–∞
                        if 'income_breakdown' in metrics:
                            st.write("#### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ—Ö–æ–¥–∞")
                            income_df = pd.DataFrame({
                                "–¢–∏–ø –±–æ–Ω—É—Å–∞": [
                                    "–õ–∏—á–Ω—ã–π –±–æ–Ω—É—Å",
                                    "–ì—Ä—É–ø–ø–æ–≤–æ–π –±–æ–Ω—É—Å",
                                    "–ö–ª—É–±–Ω—ã–π –±–æ–Ω—É—Å",
                                    "–ë–æ–Ω—É—Å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞",
                                    "–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –±–æ–Ω—É—Å",
                                    "–ë–æ–Ω—É—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è",
                                    "–û–±—â–∏–π –¥–æ—Ö–æ–¥"
                                ],
                                "–°—É–º–º–∞": [
                                    f"{metrics['income_breakdown']['personal_bonus']:,.2f}",
                                    f"{metrics['income_breakdown']['group_bonus']:,.2f}",
                                    f"{metrics['income_breakdown']['club_bonus']:,.2f}",
                                    f"{metrics['income_breakdown']['mentorship_bonus']:,.2f}",
                                    f"{metrics['income_breakdown']['dynamic_bonus']:,.2f}",
                                    f"{metrics['income_breakdown'].get('recovery_bonus', 0):,.2f}",
                                    f"{metrics['income_breakdown']['total']:,.2f}"
                                ]
                            })
                            st.table(income_df)
                            
                        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ç–∏ –¥–ª—è —ç—Ç–æ–≥–æ —ç—Ç–∞–ø–∞
                        if i < len(history) - 1:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç—Ç–∞–ø–∞
                            next_snapshot = history[i + 1]
                            st.write("#### –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —ç—Ç–∞–ø–µ")
                            changes = {
                                "PV": next_snapshot['metrics']['total_pv'] - metrics['total_pv'],
                                "–î–æ—Ö–æ–¥": next_snapshot['metrics']['expected_income'] - metrics['expected_income'],
                                "–ü–∞—Ä—Ç–Ω–µ—Ä—ã": next_snapshot['metrics']['total_partners'] - metrics['total_partners']
                            }
                            changes_df = pd.DataFrame({
                                "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": ["–ò–∑–º–µ–Ω–µ–Ω–∏–µ PV", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞", "–ù–æ–≤—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤"],
                                "–ó–Ω–∞—á–µ–Ω–∏–µ": [
                                    f"{changes['PV']:+,.0f}",
                                    f"{changes['–î–æ—Ö–æ–¥']:+,.2f} —É.–µ.",
                                    f"{changes['–ü–∞—Ä—Ç–Ω–µ—Ä—ã']:+d}"
                                ]
                            })
                            st.table(changes_df)
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ç–∏
            fig = plot_network(result.network)
            st.plotly_chart(fig, use_container_width=True)
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø—Ä–µ—Å—Å–∏–∏
            st.write("### –°—Ç–∞—Ç—É—Å –∫–æ–º–ø—Ä–µ—Å—Å–∏–∏")
            is_compressed, warning_level = root_partner.check_compression_status()
            
            if is_compressed:
                st.error(f"‚ö†Ô∏è {COMPRESSION_WARNINGS[warning_level]['message']}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ª–æ–≤–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                st.write("#### –£—Å–ª–æ–≤–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:")
                for recovery_type, conditions in RECOVERY_CONDITIONS.items():
                    st.write(f"**{recovery_type}:**")
                    st.write(f"- –ü–µ—Ä–∏–æ–¥: {conditions['period']} –º–µ—Å.")
                    st.write(f"- –¢—Ä–µ–±—É–µ–º—ã–π PV: {conditions['required_pv']}")
                    st.write(f"- –ë–æ–Ω—É—Å: +{conditions['bonus_rate']:.1%}")
            else:
                compression_rule = root_partner.get_compression_rule()
                st.success("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞")
                st.write(f"–ü–æ—Ä–æ–≥ –∫–æ–º–ø—Ä–µ—Å—Å–∏–∏: {compression_rule['threshold']} PV")
                st.write(f"–õ—å–≥–æ—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {compression_rule['grace_period']} –º–µ—Å.")
                
            # –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–ø—Ä–µ—Å—Å–∏–π
            if root_partner.compression_history:
                st.write("#### –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–ø—Ä–µ—Å—Å–∏–π:")
                compression_df = pd.DataFrame(
                    root_partner.compression_history,
                    columns=["–î–∞—Ç–∞", "PV"]
                )
                st.table(compression_df)
            
            # –ö–ª—É–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            st.write("### –ö–ª—É–±–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
            root_partner = structure.partners[structure.root_id]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª—É–±–Ω–æ–µ —á–ª–µ–Ω—Å—Ç–≤–æ
            root_partner.update_club_membership()
            current_club = root_partner.get_club_level()
            
            if current_club:
                st.write(f"**–¢–µ–∫—É—â–∏–π –∫–ª—É–±–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å:** {current_club}")
                
                # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏
                st.write("#### –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏")
                benefits = root_partner.get_club_benefits()
                for benefit in benefits:
                    if benefit in CLUB_BENEFITS:
                        benefit_info = CLUB_BENEFITS[benefit]
                        st.write(f"- {benefit_info['name']}")
                        
                # –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                st.write("#### –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
                for club_level in root_partner.club_memberships:
                    if club_level in CLUB_EVENTS:
                        st.write(f"**{club_level} Club:**")
                        for event in CLUB_EVENTS[club_level]:
                            discount = root_partner.get_event_discount(club_level)
                            final_price = event['base_price'] * (1 - discount)
                            st.write(
                                f"- {event['name']}\n"
                                f"  * –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {event['duration']} –¥–Ω–µ–π\n"
                                f"  * –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: {event['base_price']} —É.–µ.\n"
                                f"  * –°–∫–∏–¥–∫–∞: {discount:.0%}\n"
                                f"  * –ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: {final_price:.0f} —É.–µ."
                            )
            else:
                st.write("_–ü–∞—Ä—Ç–Ω–µ—Ä –ø–æ–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–ª—É–±–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã_")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∫–ª—É–±—ã
                st.write("#### –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è:")
                for level, requirements in CLUB_LEVELS.items():
                    st.write(f"**{level} Club:**")
                    qual_req = requirements['qualification']
                    months_req = requirements['maintenance_period']
                    st.write(
                        f"- –ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è: {qual_req}\n"
                        f"- –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏: {months_req} –º–µ—Å."
                    )
            
        with col2:
            st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
            metrics = result.get_metrics()
            fig = plot_metrics(metrics)
            st.plotly_chart(fig, use_container_width=True)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏
            if root_partner.recovery_status:
                recovery_info = RECOVERY_CONDITIONS[root_partner.recovery_status]
                st.warning(
                    f"üîÑ –°—Ç–∞—Ç—É—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {root_partner.recovery_status}\n"
                    f"–ë–æ–Ω—É—Å: +{recovery_info['bonus_rate']:.1%}"
                )
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            st.write("### –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ç–∏")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º –Ω–∞–±–æ—Ä–µ
            root_partner = structure.partners[structure.root_id]
            metrics_data = {
                "–ú–µ—Ç—Ä–∏–∫–∞": [
                    "–í—Å–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤",
                    "–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤",
                    "–û–±—â–∏–π PV",
                    "–û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥"
                ],
                "–ó–Ω–∞—á–µ–Ω–∏–µ": [
                    metrics["total_partners"],
                    metrics["active_partners"],
                    f"{metrics['total_pv']:,.0f}",
                    f"{metrics['expected_income']:,.2f} —É.–µ."
                ]
            }
            
            if root_partner.starter_kit:
                kit = STARTER_KITS[root_partner.starter_kit]
                metrics_data["–ú–µ—Ç—Ä–∏–∫–∞"].extend([
                    "–°—Ç–∞—Ä—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä",
                    "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏"
                ])
                
                active_privileges = [
                    STARTER_KIT_PRIVILEGES[p]['name']
                    for p in root_partner.privileges
                    if root_partner.has_privilege(p)
                ]
                
                metrics_data["–ó–Ω–∞—á–µ–Ω–∏–µ"].extend([
                    f"{root_partner.starter_kit} ({kit['price']} —É.–µ.)",
                    ", ".join(active_privileges) if active_privileges else "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π"
                ])
            
            stats_df = pd.DataFrame(metrics_data)
            st.table(stats_df)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ—Ö–æ–¥–∞ —Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π
            income_df = pd.DataFrame({
                "–¢–∏–ø –±–æ–Ω—É—Å–∞": [
                    "–õ–∏—á–Ω—ã–π –±–æ–Ω—É—Å",
                    "–ì—Ä—É–ø–ø–æ–≤–æ–π –±–æ–Ω—É—Å",
                    "–ö–ª—É–±–Ω—ã–π –±–æ–Ω—É—Å",
                    "–ë–æ–Ω—É—Å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞",
                    "–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –±–æ–Ω—É—Å",
                    "–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç",
                    "–ë–æ–Ω—É—Å –ª–∏–¥–µ—Ä—Å—Ç–≤–∞",
                    "–ë–æ–Ω—É—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è",
                    "–û–±—â–∏–π –¥–æ—Ö–æ–¥"
                ],
                "–°—É–º–º–∞": [
                    f"{metrics['income_breakdown']['personal_bonus']:,.2f}",
                    f"{metrics['income_breakdown']['group_bonus']:,.2f}",
                    f"{metrics['income_breakdown']['club_bonus']:,.2f}",
                    f"{metrics['income_breakdown']['mentorship_bonus']:,.2f}",
                    f"{metrics['income_breakdown']['dynamic_bonus']:,.2f}",
                    f"{root_partner.get_quick_start_bonus():,.2f}",
                    f"{root_partner.get_leadership_bonus():,.2f}",
                    f"{metrics['income_breakdown'].get('recovery_bonus', 0):,.2f}",
                    f"{metrics['income_breakdown']['total']:,.2f}"
                ]
            })
            st.table(income_df)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è—Ö
            st.write("### –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è")
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–≥–∏–æ–Ω–µ
            region_df = pd.DataFrame({
                "–ü–∞—Ä–∞–º–µ—Ç—Ä": [
                    "–†–µ–≥–∏–æ–Ω",
                    "–í–∞–ª—é—Ç–∞",
                    "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π PV",
                    "–ü–æ—Ä–æ–≥ –∫–æ–º–ø—Ä–µ—Å—Å–∏–∏",
                    "–õ—å–≥–æ—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥"
                ],
                "–ó–Ω–∞—á–µ–Ω–∏–µ": [
                    region_info['name'],
                    region_info['currency'],
                    f"{region_info['min_pv_threshold']} PV",
                    f"{region_info['compression_threshold']} PV",
                    f"{region_info['grace_period']} –º–µ—Å."
                ]
            })
            st.table(region_df)
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–π
            if 'qualification_adjustments' in region_info:
                st.write("#### –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–π")
                
                # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫
                adjustments_data = []
                for qual, adjustments in region_info['qualification_adjustments'].items():
                    for param, value in adjustments.items():
                        if param == 'min_go':
                            param_name = '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π GO'
                            value_str = f"{value:,} PV"
                        else:
                            param_name = param
                            value_str = str(value)
                            
                        adjustments_data.append({
                            "–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è": QUALIFICATION_NAMES[qual],
                            "–ü–∞—Ä–∞–º–µ—Ç—Ä": param_name,
                            "–ó–Ω–∞—á–µ–Ω–∏–µ": value_str,
                            "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ": f"{QUALIFICATIONS[qual]['min_go']:,} PV"
                        })
                
                if adjustments_data:
                    adjustments_df = pd.DataFrame(adjustments_data)
                    st.table(adjustments_df)
                    
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—É–±–Ω—ã—Ö –±–æ–Ω—É—Å–∞—Ö –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ—Ö–æ–¥–∞
            club_bonus_rate = root_partner.get_club_bonus_rate()
            leadership_bonus = root_partner.get_leadership_bonus()
            
            income_df = pd.DataFrame({
                "–¢–∏–ø –±–æ–Ω—É—Å–∞": [
                    "–õ–∏—á–Ω—ã–π –±–æ–Ω—É—Å",
                    "–ì—Ä—É–ø–ø–æ–≤–æ–π –±–æ–Ω—É—Å",
                    "–ö–ª—É–±–Ω—ã–π –±–æ–Ω—É—Å",
                    "–ë–æ–Ω—É—Å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞",
                    "–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –±–æ–Ω—É—Å",
                    "–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç",
                    "–ë–æ–Ω—É—Å –ª–∏–¥–µ—Ä—Å—Ç–≤–∞",
                    "–ë–æ–Ω—É—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è",
                    "–û–±—â–∏–π –¥–æ—Ö–æ–¥"
                ],
                "–°—É–º–º–∞": [
                    f"{metrics['income_breakdown']['personal_bonus']:,.2f}",
                    f"{metrics['income_breakdown']['group_bonus']:,.2f}",
                    f"{metrics['income_breakdown']['club_bonus']:,.2f}",
                    f"{metrics['income_breakdown']['mentorship_bonus']:,.2f}",
                    f"{metrics['income_breakdown']['dynamic_bonus']:,.2f}",
                    f"{root_partner.get_quick_start_bonus():,.2f}",
                    f"{leadership_bonus:,.2f}",
                    f"{metrics['income_breakdown'].get('recovery_bonus', 0):,.2f}",
                    f"{metrics['income_breakdown']['total']:,.2f}"
                ]
            })
            st.table(income_df)
            
            if club_bonus_rate > 0:
                st.write(f"**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –∫–ª—É–±–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞:** +{club_bonus_rate:.1%}")
            
            # –î–∏–Ω–∞–º–∏–∫–∞ —Ä–æ—Å—Ç–∞
            st.write("### –î–∏–Ω–∞–º–∏–∫–∞ —Ä–æ—Å—Ç–∞")
            growth_df = pd.DataFrame({
                "–ü–µ—Ä–∏–æ–¥": [
                    "–ú–µ—Å—è—á–Ω—ã–π —Ä–æ—Å—Ç",
                    "–ö–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç",
                    "–ì–æ–¥–æ–≤–æ–π —Ä–æ—Å—Ç"
                ],
                "–ó–Ω–∞—á–µ–Ω–∏–µ": [
                    f"{metrics['growth_metrics']['monthly_growth']:.1%}",
                    f"{metrics['growth_metrics']['quarterly_growth']:.1%}",
                    f"{metrics['growth_metrics']['yearly_growth']:.1%}"
                ]
            })
            st.table(growth_df)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤
            if 'risk_analysis' in metrics:
                st.write("### –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤")
                risk_df = pd.DataFrame({
                    "–¢–∏–ø —Ä–∏—Å–∫–∞": [
                        "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –∫—Ä—É–ø–Ω—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤",
                        "–†–∏—Å–∫ –∫–æ–º–ø—Ä–µ—Å—Å–∏–∏",
                        "–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"
                    ],
                    "–ó–Ω–∞—á–µ–Ω–∏–µ": [
                        f"{metrics['risk_analysis']['dependency_risk']:.2%}",
                        f"{metrics['risk_analysis']['compression_risk']:.2%}",
                        f"{metrics['risk_analysis']['stability_risk']:.2%}"
                    ]
                })
                st.table(risk_df)
                
                if 'vulnerability_score' in metrics:
                    st.write(f"**–û–±—â–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —É—è–∑–≤–∏–º–æ—Å—Ç–∏:** {metrics['vulnerability_score']:.2%}")

            # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤
            if 'vulnerabilities' in metrics:
                st.write("### –ê–Ω–∞–ª–∏–∑ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π")
                
                # –û–±—â–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —É—è–∑–≤–∏–º–æ—Å—Ç–∏
                vulnerability_score = metrics['vulnerability_score']
                score_color = (
                    "red" if vulnerability_score > 0.7
                    else "orange" if vulnerability_score > 0.4
                    else "green"
                )
                st.markdown(
                    f"**–û–±—â–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —É—è–∑–≤–∏–º–æ—Å—Ç–∏:** "
                    f"<span style='color: {score_color}'>{vulnerability_score:.1%}</span>",
                    unsafe_allow_html=True
                )
                
                # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
                vuln_types = {
                    'compression_abuse': '–ö–æ–º–ø—Ä–µ—Å—Å–∏—è',
                    'qualification_abuse': '–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏',
                    'volume_distribution': '–û–±—ä–µ–º—ã',
                    'structure_manipulation': '–°—Ç—Ä—É–∫—Ç—É—Ä–∞',
                    'bonus_exploitation': '–ë–æ–Ω—É—Å—ã'
                }
                
                vuln_tabs = st.tabs(list(vuln_types.values()))
                
                for (vuln_type, tab_name), tab in zip(vuln_types.items(), vuln_tabs):
                    with tab:
                        vuln_data = metrics['vulnerabilities'][vuln_type]
                        
                        # –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å —Ä–∏—Å–∫–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
                        risk_color = (
                            "red" if vuln_data['risk_level'] > 0.7
                            else "orange" if vuln_data['risk_level'] > 0.4
                            else "green"
                        )
                        st.markdown(
                            f"**–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:** "
                            f"<span style='color: {risk_color}'>{vuln_data['risk_level']:.1%}</span>",
                            unsafe_allow_html=True
                        )
                        
                        # –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
                        if vuln_data['issues']:
                            st.write("#### –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
                            for issue in vuln_data['issues']:
                                with st.expander(issue['description']):
                                    if 'partner_id' in issue:
                                        st.write(f"–ü–∞—Ä—Ç–Ω–µ—Ä ID: {issue['partner_id']}")
                                    if 'pattern' in issue:
                                        st.write(f"–ü–∞—Ç—Ç–µ—Ä–Ω: {issue['pattern']}")
                                    if 'frequency' in issue:
                                        st.write(f"–ß–∞—Å—Ç–æ—Ç–∞: {issue['frequency']}")
                                    if 'changes' in issue:
                                        st.write("–ò–∑–º–µ–Ω–µ–Ω–∏—è:")
                                        changes_df = pd.DataFrame(issue['changes'])
                                        st.table(changes_df)
                        else:
                            st.success("–ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
                            
                # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                if 'recommendations' in metrics:
                    st.write("### –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é")
                    for rec in metrics['recommendations']:
                        with st.expander(f"üîç {rec['description']} (–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {rec['priority']})"):
                            st.write(rec['details'])
                            
            # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç
            if history:
                st.write("### –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç")
                payments_data = []
                for snapshot in history:
                    if 'income_breakdown' in snapshot['metrics']:
                        payments_data.append({
                            '–≠—Ç–∞–ø': snapshot['stage_name'],
                            '–í—ã–ø–ª–∞—Ç—ã': snapshot['metrics']['income_breakdown']['total']
                        })
                
                if payments_data:
                    payments_df = pd.DataFrame(payments_data)
                    fig = go.Figure(data=[
                        go.Bar(
                            x=payments_df['–≠—Ç–∞–ø'],
                            y=payments_df['–í—ã–ø–ª–∞—Ç—ã'],
                            text=[f"{x:,.2f}" for x in payments_df['–í—ã–ø–ª–∞—Ç—ã']],
                            textposition='auto',
                        )
                    ])
                    fig.update_layout(
                        title="–î–∏–Ω–∞–º–∏–∫–∞ –≤—ã–ø–ª–∞—Ç –ø–æ —ç—Ç–∞–ø–∞–º",
                        xaxis_title="–≠—Ç–∞–ø –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è",
                        yaxis_title="–°—É–º–º–∞ –≤—ã–ø–ª–∞—Ç",
                        height=400
                    )
                    st.plotly_chart(fig, use_container_width=True)

if __name__ == "__main__":
    main() 